// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: modbustohttp/v1alpha1/service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "modbustohttp/gen/modbustohttp/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModbusServiceName is the fully-qualified name of the ModbusService service.
	ModbusServiceName = "modbustohttp.v1alpha1.ModbusService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModbusServiceReadHoldingRegistersProcedure is the fully-qualified name of the ModbusService's
	// ReadHoldingRegisters RPC.
	ModbusServiceReadHoldingRegistersProcedure = "/modbustohttp.v1alpha1.ModbusService/ReadHoldingRegisters"
	// ModbusServiceWriteSingleRegisterProcedure is the fully-qualified name of the ModbusService's
	// WriteSingleRegister RPC.
	ModbusServiceWriteSingleRegisterProcedure = "/modbustohttp.v1alpha1.ModbusService/WriteSingleRegister"
)

// ModbusServiceClient is a client for the modbustohttp.v1alpha1.ModbusService service.
type ModbusServiceClient interface {
	ReadHoldingRegisters(context.Context, *connect.Request[v1alpha1.ReadHoldingRegistersRequest]) (*connect.Response[v1alpha1.ReadHoldingRegistersResponse], error)
	WriteSingleRegister(context.Context, *connect.Request[v1alpha1.WriteSingleRegisterRequest]) (*connect.Response[v1alpha1.WriteSingleRegisterResponse], error)
}

// NewModbusServiceClient constructs a client for the modbustohttp.v1alpha1.ModbusService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModbusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	modbusServiceMethods := v1alpha1.File_modbustohttp_v1alpha1_service_proto.Services().ByName("ModbusService").Methods()
	return &modbusServiceClient{
		readHoldingRegisters: connect.NewClient[v1alpha1.ReadHoldingRegistersRequest, v1alpha1.ReadHoldingRegistersResponse](
			httpClient,
			baseURL+ModbusServiceReadHoldingRegistersProcedure,
			connect.WithSchema(modbusServiceMethods.ByName("ReadHoldingRegisters")),
			connect.WithClientOptions(opts...),
		),
		writeSingleRegister: connect.NewClient[v1alpha1.WriteSingleRegisterRequest, v1alpha1.WriteSingleRegisterResponse](
			httpClient,
			baseURL+ModbusServiceWriteSingleRegisterProcedure,
			connect.WithSchema(modbusServiceMethods.ByName("WriteSingleRegister")),
			connect.WithClientOptions(opts...),
		),
	}
}

// modbusServiceClient implements ModbusServiceClient.
type modbusServiceClient struct {
	readHoldingRegisters *connect.Client[v1alpha1.ReadHoldingRegistersRequest, v1alpha1.ReadHoldingRegistersResponse]
	writeSingleRegister  *connect.Client[v1alpha1.WriteSingleRegisterRequest, v1alpha1.WriteSingleRegisterResponse]
}

// ReadHoldingRegisters calls modbustohttp.v1alpha1.ModbusService.ReadHoldingRegisters.
func (c *modbusServiceClient) ReadHoldingRegisters(ctx context.Context, req *connect.Request[v1alpha1.ReadHoldingRegistersRequest]) (*connect.Response[v1alpha1.ReadHoldingRegistersResponse], error) {
	return c.readHoldingRegisters.CallUnary(ctx, req)
}

// WriteSingleRegister calls modbustohttp.v1alpha1.ModbusService.WriteSingleRegister.
func (c *modbusServiceClient) WriteSingleRegister(ctx context.Context, req *connect.Request[v1alpha1.WriteSingleRegisterRequest]) (*connect.Response[v1alpha1.WriteSingleRegisterResponse], error) {
	return c.writeSingleRegister.CallUnary(ctx, req)
}

// ModbusServiceHandler is an implementation of the modbustohttp.v1alpha1.ModbusService service.
type ModbusServiceHandler interface {
	ReadHoldingRegisters(context.Context, *connect.Request[v1alpha1.ReadHoldingRegistersRequest]) (*connect.Response[v1alpha1.ReadHoldingRegistersResponse], error)
	WriteSingleRegister(context.Context, *connect.Request[v1alpha1.WriteSingleRegisterRequest]) (*connect.Response[v1alpha1.WriteSingleRegisterResponse], error)
}

// NewModbusServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModbusServiceHandler(svc ModbusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modbusServiceMethods := v1alpha1.File_modbustohttp_v1alpha1_service_proto.Services().ByName("ModbusService").Methods()
	modbusServiceReadHoldingRegistersHandler := connect.NewUnaryHandler(
		ModbusServiceReadHoldingRegistersProcedure,
		svc.ReadHoldingRegisters,
		connect.WithSchema(modbusServiceMethods.ByName("ReadHoldingRegisters")),
		connect.WithHandlerOptions(opts...),
	)
	modbusServiceWriteSingleRegisterHandler := connect.NewUnaryHandler(
		ModbusServiceWriteSingleRegisterProcedure,
		svc.WriteSingleRegister,
		connect.WithSchema(modbusServiceMethods.ByName("WriteSingleRegister")),
		connect.WithHandlerOptions(opts...),
	)
	return "/modbustohttp.v1alpha1.ModbusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModbusServiceReadHoldingRegistersProcedure:
			modbusServiceReadHoldingRegistersHandler.ServeHTTP(w, r)
		case ModbusServiceWriteSingleRegisterProcedure:
			modbusServiceWriteSingleRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModbusServiceHandler struct{}

func (UnimplementedModbusServiceHandler) ReadHoldingRegisters(context.Context, *connect.Request[v1alpha1.ReadHoldingRegistersRequest]) (*connect.Response[v1alpha1.ReadHoldingRegistersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("modbustohttp.v1alpha1.ModbusService.ReadHoldingRegisters is not implemented"))
}

func (UnimplementedModbusServiceHandler) WriteSingleRegister(context.Context, *connect.Request[v1alpha1.WriteSingleRegisterRequest]) (*connect.Response[v1alpha1.WriteSingleRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("modbustohttp.v1alpha1.ModbusService.WriteSingleRegister is not implemented"))
}
